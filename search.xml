<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[FluentPython笔记0x06]]></title>
      <url>/2017/08/17/FluentPython%E7%AC%94%E8%AE%B00x06/</url>
      <content type="html"><![CDATA[<h1 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h1><h2 id="Generic-Mapping-Types（p64"><a href="#Generic-Mapping-Types（p64" class="headerlink" title="Generic Mapping Types（p64)"></a>Generic Mapping Types（p64)</h2><ul>
<li>可哈希：如果一个对象在它的生命周期中有一个不会改变的哈希值（它需要有<code>__hash__()</code>函数），并且它能够和其他对象进行比较（需要有<code>__eq__()</code>函数）。可哈希的对象相等必须拥有相同的哈希值。<code>str</code>、<code>bytes</code>以及数类型都是可哈希的；<code>frozenset</code>也总是可哈希的，因为它的元素必须可哈希；<code>tuple</code>仅当它包含的所有元素可哈希是它才是可哈希的。例：</li>
</ul>
<a id="more"></a>
<pre class=" language-python"><code class="language-python">
tt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 8027212646858338501</span>
tl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>tl<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># TypeError: unhashable type: 'list'</span>
</code></pre>
<ul>
<li>建立<code>dict</code>：</li>
</ul>
<pre class=" language-python"><code class="language-python">
a <span class="token operator">=</span> dict<span class="token punctuation">(</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> three<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
c <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">==</span> c <span class="token operator">==</span> d<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># True</span>
</code></pre>
<h2 id="dict-Comprehesions（p66）"><a href="#dict-Comprehesions（p66）" class="headerlink" title="dict Comprehesions（p66）"></a>dict Comprehesions（p66）</h2><ul>
<li>类似与listcomp，<code>dict</code>也有dictcomp。</li>
</ul>
<pre class=" language-python"><code class="language-python">
DIAL_CODES <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">,</span> <span class="token string">'China'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token string">'India'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'United States'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">'Indonesia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">'Brazil'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token string">'Pakistan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">880</span><span class="token punctuation">,</span> <span class="token string">'Bangladesh'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token string">'Nigeria'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Russia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
country_code <span class="token operator">=</span> <span class="token punctuation">{</span>country<span class="token punctuation">:</span> code <span class="token keyword">for</span> code<span class="token punctuation">,</span> country <span class="token keyword">in</span> DIAL_CODES<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>country_code<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># {'China': 86, 'India': 91, 'United States': 1, 'Indonesia': 62, 'Brazil': 55, 'Pakistan': 92, 'Bangladesh': 880, 'Nigeria': 234, 'Russia': 7, 'Japan': 81}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">{</span>code<span class="token punctuation">:</span> country<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> country<span class="token punctuation">,</span> code <span class="token keyword">in</span> country_code<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> code <span class="token operator">&lt;</span> <span class="token number">66</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># {1: 'UNITED STATES', 62: 'INDONESIA', 55: 'BRAZIL', 7: 'RUSSIA'}</span>
</code></pre>
<ul>
<li>鸭子类型（duck typing，参考<a href="https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B" target="_blank" rel="external">维基百科</a>）：“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”鸭子类型是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定。</li>
</ul>
<h2 id="Handling-Missing-Keys-with-setdefault（p68）"><a href="#Handling-Missing-Keys-with-setdefault（p68）" class="headerlink" title="Handling Missing Keys with setdefault（p68）"></a>Handling Missing Keys with setdefault（p68）</h2><ul>
<li><code>d.get</code>和<code>d.setdefault</code>：<code>d.get(k, default)</code>是一种比较方便来处理<code>KeyError</code>的方法，在没有<code>k</code>值时会返回<code>default</code>。但是如果想更新字典中键值对使用<code>setdefault</code>会更加方便。</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> re

WORD_RE <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'\w+'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dict_get</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> line_no<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> match <span class="token keyword">in</span> WORD_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>
            word <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
            column_no <span class="token operator">=</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
            location <span class="token operator">=</span> <span class="token punctuation">(</span>line_no<span class="token punctuation">,</span> column_no<span class="token punctuation">)</span>
            occurrences <span class="token operator">=</span> index<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            occurrences<span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">)</span>
            index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> occurrences
    <span class="token keyword">for</span> word <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token operator">=</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dict_setdefault</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> line_no<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> match <span class="token keyword">in</span> WORD_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>
            word <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
            column_no <span class="token operator">=</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
            location <span class="token operator">=</span> <span class="token punctuation">(</span>line_no<span class="token punctuation">,</span> column_no<span class="token punctuation">)</span>
            index<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">)</span>
    <span class="token keyword">for</span> word <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token operator">=</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        dict_get<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>
        dict_setdefault<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>
</code></pre>
<p>对比<code>dict_get</code>和<code>dict_setdefault</code>两种方法可发现<code>setdefault</code>更加方便。</p>
<ul>
<li>有关于字典排序：对于字典<code>d</code>，如果希望对其进行按<code>key</code>排序，可以直接使用<code>sorted(d)</code>，如果希望对其进行值的排序，则可以：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">for</span> key <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token operator">=</span>d<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> d<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>关于正则表达式匹配的几个函数<code>match</code>、<code>search</code>、<code>findall</code>、<code>finditer</code>：<code>match</code>成功匹配会返回<code>Match</code>对象，失败会返回<code>None</code>；<code>search</code>类似<code>match</code>，但只返回第一个匹配字符串；<code>findall</code>返回为数组形式的结果；<code>finditer</code>返回迭代器形式的结果。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动画小记：亚人酱有话要说]]></title>
      <url>/2017/08/07/%E5%8A%A8%E7%94%BB%E5%B0%8F%E8%AE%B0%EF%BC%9A%E4%BA%9A%E4%BA%BA%E9%85%B1%E6%9C%89%E8%AF%9D%E8%A6%81%E8%AF%B4/</url>
      <content type="html"><![CDATA[<p><img src="http://wx3.sinaimg.cn/mw690/872f2373gy1fibdntxlx7j20rs0elwp7.jpg" alt="亚人酱有话要说"></p>
<p>哈，以后动画小记和galgame小记都写在这里了，某社交网络上的字数限制略难受，还能贴个staff表。</p>
<p>在火车上补完亚人酱，卧槽，这部太对胃口啦！那么那么……</p>
<a id="more"></a>
<h1 id="亚人酱有话要说（A-1-Pictrues，2017）：-2"><a href="#亚人酱有话要说（A-1-Pictrues，2017）：-2" class="headerlink" title="亚人酱有话要说（A-1 Pictrues，2017）：+2"></a>亚人酱有话要说（A-1 Pictrues，2017）：+2</h1><h2 id="staff"><a href="#staff" class="headerlink" title="staff"></a>staff</h2><p>原作：Petos<br>监督：安藤良<br>系列构成、剧本：吉冈孝夫<br>角色设计：川上哲也<br>美术监督：针生胜文<br>色彩设计：赤间三佐子<br>摄影监督：宫胁洋平<br>CG监督：那须信司<br>编辑：西山茂<br>音响监督：明田川仁<br>音乐：横山克<br>动画制作：A-1 Pictures<br>制作：《亚人酱有话要说》制作委员会</p>
<h2 id="剧情：-2"><a href="#剧情：-2" class="headerlink" title="剧情：+2"></a>剧情：+2</h2><p>其实我看OP的时候看到OP曲作词是冈妈，差点想关了，但是倒回去看看剧本和系列构成是吉冈孝夫，诶，这不是四月的系列构成么？</p>
<p>回到剧情，《亚人酱有话要说》（以下简称《亚人酱》）剧情的整体特点就是：日常搞笑、温馨治愈、引起思考。故事整体就是围绕“亚人”日常遇到的问题以及亚人所具有的“特殊能力”展开的，其中不仅仅包括无厘头的日常，也有像老师帮助小雪的温暖场面，更有教导主任一番话引起角色们和观众们的思考。剧情结构并不紧密，很适合放松心情观看。</p>
<h2 id="动画：-1"><a href="#动画：-1" class="headerlink" title="动画：+1"></a>动画：+1</h2><p>JK亚人酱太棒啦！OP的绯雁简直萌杀我！分镜也是非常不错，尤其是前几集。</p>
<h2 id="角色：-2"><a href="#角色：-2" class="headerlink" title="角色：+2"></a>角色：+2</h2><p>请给我一只绯雁，谢谢！角色塑造还是很丰满的，就拿老师举例，专注于亚人研究，但是教导主任一盆冷水他就开始钻牛角尖，还是蛮不错的吗（嗯……）！不过本作里出场的角色都是好孩子恩。</p>
<h2 id="音乐：-1"><a href="#音乐：-1" class="headerlink" title="音乐：+1"></a>音乐：+1</h2><p>总觉得风格很熟悉，后来看staff表发现是横山克！不错，有机会听听OST。OP、ED都不错~</p>
<h2 id="配音：-1"><a href="#配音：-1" class="headerlink" title="配音：+1"></a>配音：+1</h2><p>红A的“SEX……”，额，换个话题，果然还是给我一只绯雁……</p>
]]></content>
      
        <categories>
            
            <category> ACG </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACG </tag>
            
            <tag> 动画小记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentPython笔记0x05]]></title>
      <url>/2017/08/02/FluentPython%E7%AC%94%E8%AE%B00x05/</url>
      <content type="html"><![CDATA[<h2 id="NumPy-and-SciPy（p52）"><a href="#NumPy-and-SciPy（p52）" class="headerlink" title="NumPy and SciPy（p52）"></a>NumPy and SciPy（p52）</h2><ul>
<li><code>numpy.ndarray</code>的基础操作：</li>
</ul>
<a id="more"></a>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> numpy

a <span class="token operator">=</span> numpy<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])</span>
<span class="token comment" spellcheck="true"># type(a): numpy.ndarray</span>
<span class="token comment" spellcheck="true"># a.shape: (12,)</span>
a<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>
<span class="token triple-quoted-string string">'''
array([[0, 1, 2, 3],
       [4, 5, 6, 7],
       [8, 9 ,10, 11]])
'''</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 8, 9, 10, 11</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 1, 5, 9</span>
a<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
array([[0, 4, 8],
       [1, 5, 9],
       [2, 6, 10],
       [3, 7, 11]])
'''</span>
</code></pre>
<h2 id="Deques-and-Other-Queues（p55）"><a href="#Deques-and-Other-Queues（p55）" class="headerlink" title="Deques and Other Queues（p55）"></a>Deques and Other Queues（p55）</h2><ul>
<li><code>deque</code>：如果把<code>list</code>当做栈使用性能上十分低下，此时应该使用<code>deque</code>代替。</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque


dq <span class="token operator">=</span> deque<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]， maxlen=10)</span>
dq<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)</span>
<span class="token comment" spellcheck="true"># rotate(n)当n>0时将n项从最右移到最左，n&lt;0反之。</span>
dp<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)</span>
<span class="token comment" spellcheck="true"># deque会保持长度，最右侧的0被移除</span>
dq<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># deque([3, 4, 5, 6, 7, 8, 9, 11, 22, 33], maxlen=10)</span>
dq<span class="token punctuation">.</span>extendleft<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># deque([40, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)</span>
<span class="token comment" spellcheck="true"># 从左加入列表中的数据时会反转</span>
</code></pre>
<p>在<code>deque</code>的方法中，注意<code>remove</code>的实现是严格按照数据从序列两端进出的，故性能并不佳；<code>append</code>和<code>popleft</code>是原子操作，在LIFO和多线程操作的情况下不需要锁。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentPython笔记0x04]]></title>
      <url>/2017/08/01/FluentPython%E7%AC%94%E8%AE%B00x04/</url>
      <content type="html"><![CDATA[<h2 id="p32"><a href="#p32" class="headerlink" title="p32"></a>p32</h2><ul>
<li>和列表相比，元组除了无法修改其中的值以外，只有一处和列表不同：元组无法使用<code>__reversed__</code>，但是可以使用以下方法代替：</li>
</ul>
<a id="more"></a>
<pre class=" language-python"><code class="language-python">
t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>元组和列表可以与<code>int</code>型整数相乘，含义为返回对应的元组或列表，里边包括重复整数次的原来的元组或列表的内容。</li>
</ul>
<h2 id="p33"><a href="#p33" class="headerlink" title="p33"></a>p33</h2><ul>
<li><p>像元组、列表等序列切片时为什么排除结束标号的项：1.可以简单的看出切片得到的长度，例<code>range(3)</code>以及<code>my_list[:3]</code>；2.可以简单地计算切片长度，只需结束序号减去开始序号；3.可以只使用一个序号就能把序列切成两部分，例如<code>my_list[:x]</code>和<code>my_list[x:]</code>。</p>
</li>
<li><p>切片的实现是一个切片类：<code>slice(start, stop, step)</code>。例：</p>
</li>
</ul>
<pre class=" language-python"><code class="language-python">
source <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
0.......8....12
0 AXL         5
1 August      6
2 key        10
'''</span>
INDEX <span class="token operator">=</span> slice<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
NAME <span class="token operator">=</span> slice<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
POINT <span class="token operator">=</span> slice<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>
line_items <span class="token operator">=</span> source<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> line_items<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>POINT<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>切片赋值操作：</li>
</ul>
<pre class=" language-python"><code class="language-python">
l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># [0, 1, 20, 30, 5, 6, 7, 8, 9]</span>
<span class="token keyword">del</span> l<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># [0, 1, 20, 30, 5, 8, 9]</span>
l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># [0, 1, 20, 11, 5, 22, 9]</span>
l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token comment" spellcheck="true"># 错误，左面是列表右面对应应该也是列表等可迭代对象</span>
l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># [0, 1, 100, 22, 9]</span>
</code></pre>
<h2 id="p40"><a href="#p40" class="headerlink" title="p40"></a>p40</h2><ul>
<li>有关修改元组中列表的问题：代码如下。</li>
</ul>
<pre class=" language-python"><code class="language-python">
t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span>
</code></pre>
<p>终端报错如下</p>
<pre><code>TypeError: &#39;tuple&#39; object does not support item assignment
</code></pre><p>但是此时打印<code>t</code>会显示</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>根据Python生成的字节码，元组<code>+=</code>这个操作的关键步骤为：1.将<code>t[2]</code>的值压栈（位于栈顶）；2.执行<code>栈顶值 += [50, 60]</code>，如果栈顶值不为可变变量的话会报错。但此处栈顶为<code>list</code>，故成功执行；3.执行<code>t[2] = 栈顶值</code>，如果<code>t</code>为不可变变量则会报错，此处<code>t</code>为元组故会出现报错。综上最终结果就是<code>list</code>的值改变了但是出现了报错。</p>
<p>总结：1.不建议在元组中填入可变项；2.自增不是原子操作，错误抛出可以在自增中的任何一个环节独立抛出，而不影响前面已执行的部分；3.如果遇到类似问题可以尝试阅读Python字节码，它并不难懂。</p>
<h2 id="p42"><a href="#p42" class="headerlink" title="p42"></a>p42</h2><ul>
<li><code>list.sort</code>和<code>sorted</code>：<code>list.sort</code>只能用于可变序列，会改变列表，返回值为<code>None</code>。<code>sorted</code>可以用于任何序列，它总是会返回一个新的序列而不改变原序列。</li>
</ul>
<h2 id="p44"><a href="#p44" class="headerlink" title="p44"></a>p44</h2><ul>
<li>使用<code>bisect</code>进行有序序列的查找和插入：<code>bisect</code>即二分查找。</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> bisect
<span class="token keyword">import</span> sys


HAYSTACK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
NEEDLES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span>

ROW_FMT <span class="token operator">=</span> <span class="token string">'{0:2d} @ {1:2d}     {2}{0:2d}'</span>


<span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>bisect_fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> needle <span class="token keyword">in</span> reversed<span class="token punctuation">(</span>NEEDLES<span class="token punctuation">)</span><span class="token punctuation">:</span>
        position <span class="token operator">=</span> bisect_fn<span class="token punctuation">(</span>HAYSTACK<span class="token punctuation">,</span> needle<span class="token punctuation">)</span>
        offset <span class="token operator">=</span> position <span class="token operator">*</span> <span class="token string">'  |'</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>ROW_FMT<span class="token punctuation">.</span>format<span class="token punctuation">(</span>needle<span class="token punctuation">,</span> position<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'left'</span><span class="token punctuation">:</span>
        bisect_fn <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        bisect_fn <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DEMO:'</span><span class="token punctuation">,</span> bisect_fn<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'haystack ->'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%2d'</span> <span class="token operator">%</span> n <span class="token keyword">for</span> n <span class="token keyword">in</span> HAYSTACK<span class="token punctuation">)</span><span class="token punctuation">)</span>
    demo<span class="token punctuation">(</span>bisect_fn<span class="token punctuation">)</span>
</code></pre>
<p>其中<code>bisect.bisect</code>和<code>bisect.bisect_right</code>是等价的，它们和<code>bisect.bisect_left</code>的区别在于遇到相等的值是插入的位置不同。一般情况下看不出区别，但是像<code>1</code>与<code>1.0</code>这样的还是有所区别的。</p>
<p><code>bisect.bisect</code>有个有趣的应用：给连续的数值分级。</p>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">def</span> <span class="token function">grade</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> breakpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grades<span class="token operator">=</span><span class="token string">'FDCBA'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  i <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>breakpoints<span class="token punctuation">,</span> score<span class="token punctuation">)</span>
  <span class="token keyword">return</span> grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>grade<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">for</span> score <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># FACCBAA</span>
</code></pre>
<p>此外，<code>bisect.insort</code>是向有序序列中插入值而不破坏有序，和<code>bisect.bisect</code>类似。</p>
<h2 id="p48"><a href="#p48" class="headerlink" title="p48"></a>p48</h2><ul>
<li><p>如果对序列有特殊需求，<code>list</code>不一定是最好的选择。例如，如果你想保存10M个浮点数，<code>array</code>比<code>list</code>更加有效，因为<code>array</code>没有保存每一个<code>float</code>对象的全部。另外如果需要实现类似队列或者栈则可以使用<code>deque</code>。</p>
</li>
<li><p><code>array</code>需要先指定类型，即<code>array</code>只能存储一种类型的数据，但是这换来的是极大的性能提升。<code>array.fromfile</code>和<code>array.tofile</code>分别可以读取文件创建序列和将序列写入文件，这两种操作要比读写文本文件加上解析转换要快很多。以下为<code>array</code>支持的初始化类型：</p>
</li>
</ul>
<style>
table th, table td {
  text-align: center;
  padding: 5px;
}
</style>

<table>
<thead>
<tr>
<th>类型码</th>
<th>C类型</th>
<th>Python类型</th>
<th>最小占用字节</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>char</td>
<td>character</td>
<td>1</td>
</tr>
<tr>
<td>b</td>
<td>signed char</td>
<td>int</td>
<td>1</td>
</tr>
<tr>
<td>B</td>
<td>unsigned char</td>
<td>int</td>
<td>1</td>
</tr>
<tr>
<td>u</td>
<td>Py_UNICODE</td>
<td>Unicode character</td>
<td>2</td>
</tr>
<tr>
<td>h</td>
<td>signed short</td>
<td>int</td>
<td>2</td>
</tr>
<tr>
<td>H</td>
<td>unsigned short</td>
<td>int</td>
<td>2</td>
</tr>
<tr>
<td>i</td>
<td>signed int</td>
<td>int</td>
<td>2</td>
</tr>
<tr>
<td>I</td>
<td>unsigned int</td>
<td>long</td>
<td>2</td>
</tr>
<tr>
<td>l</td>
<td>signed long</td>
<td>int</td>
<td>4</td>
</tr>
<tr>
<td>L</td>
<td>unsigned long</td>
<td>long</td>
<td>4</td>
</tr>
<tr>
<td>f</td>
<td>float</td>
<td>float</td>
<td>4</td>
</tr>
<tr>
<td>d</td>
<td>double</td>
<td>float</td>
<td>8</td>
</tr>
</tbody>
</table>
<h2 id="p51"><a href="#p51" class="headerlink" title="p51"></a>p51</h2><ul>
<li><code>memorview</code>：内存查看对象，能够使用支持缓冲区协议的数据类型进行包装，在不需要复制的情况下用Python代码访问以及等大小修改。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentPython笔记0x03]]></title>
      <url>/2017/07/27/FluentPython%E7%AC%94%E8%AE%B00x03/</url>
      <content type="html"><![CDATA[<p>唔，如果把这本书涉及到但是没提到的点拓展开，我什么时候能读完这本书呢？</p>
<h2 id="p26"><a href="#p26" class="headerlink" title="p26"></a>p26</h2><ul>
<li>元组不仅仅是不可变的列表，还可以存储记录。</li>
</ul>
<a id="more"></a>
<h2 id="p27"><a href="#p27" class="headerlink" title="p27"></a>p27</h2><pre class=" language-python"><code class="language-python">
lax_coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">33.9425</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118.408056</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 洛杉矶国际机场的经纬度</span>
city<span class="token punctuation">,</span> year<span class="token punctuation">,</span> pop<span class="token punctuation">,</span> chg<span class="token punctuation">,</span> area <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">,</span> <span class="token number">32450</span><span class="token punctuation">,</span> <span class="token number">0.66</span><span class="token punctuation">,</span> <span class="token number">8014</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 有关东京的数据：名称，年份，人口（百万），人口变化，面积（平方公里）</span>
traveler_ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'31195855'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'BRA'</span><span class="token punctuation">,</span> <span class="token string">'CE342567'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'ESP'</span><span class="token punctuation">,</span> <span class="token string">'XDA205856'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> passport <span class="token keyword">in</span> traveler_ids<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> passport<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 上面对元组的操作称为元组解包</span>
<span class="token keyword">for</span> country<span class="token punctuation">,</span> _ <span class="token keyword">in</span> traveler_ids<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 使用 _ 作为占位符，可以只获取元组中需要的字段</span>
b<span class="token punctuation">,</span> a <span class="token operator">=</span> a<span class="token punctuation">,</span> b
<span class="token comment" spellcheck="true"># 一个优雅的交换两个变量值的操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>divmod<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>divmod<span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 使用 * 来解包元组传参</span>
</code></pre>
<h2 id="p29"><a href="#p29" class="headerlink" title="p29"></a>p29</h2><ul>
<li><code>*</code>还可以获取多余的项。</li>
</ul>
<pre class=" language-python"><code class="language-python">
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果：(0, 1, [2, 3, 4])</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果：(0, 1, [2])</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果：(0, 1, [])</span>
a<span class="token punctuation">,</span> <span class="token operator">*</span>body<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> body<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果：(0, [1, 2], 3, 4)</span>
<span class="token operator">*</span>head<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 结果：([0, 1], 2, 3, 4)</span>
</code></pre>
<p>可见前缀<code>*</code>可以出现在任意位置。</p>
<ul>
<li>嵌套元组解包：</li>
</ul>
<pre class=" language-python"><code class="language-python">
metro_areas <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token number">36.933</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">35.689722</span><span class="token punctuation">,</span> <span class="token number">139.691667</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">'Delhi NCR'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token number">21.935</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28.613889</span><span class="token punctuation">,</span> <span class="token number">77.208889</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">'Mexico City'</span><span class="token punctuation">,</span> <span class="token string">'MX'</span><span class="token punctuation">,</span> <span class="token number">20.142</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">19.433333</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99.133333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">'New York-Newark'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token number">20.104</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">40.808611</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.020386</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">'Sao Paulo'</span><span class="token punctuation">,</span> <span class="token string">'BR'</span><span class="token punctuation">,</span> <span class="token number">19.649</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23.547778</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">46.635833</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{:15} | {:^9} | {:^9}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'lat.'</span><span class="token punctuation">,</span> <span class="token string">'long.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt <span class="token operator">=</span> <span class="token string">'{:15} | {:9.4f} | {:9.4f}'</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> pop<span class="token punctuation">,</span> <span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span> <span class="token keyword">in</span> metro_areas<span class="token punctuation">:</span>
    <span class="token keyword">if</span> longitude <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''结果：
                |   lat.    |   long.  
Mexico City     |   19.4333 |  -99.1333
New York-Newark |   40.8086 |  -74.0204
Sao Paulo       |  -23.5478 |  -46.6358
'''</span>
</code></pre>
<ul>
<li>格式字符串<code>str.format</code>（参考<a href="http://blog.xiayf.cn/2013/01/26/python-string-format/" target="_blank" rel="external">blog.xiayf.cn</a>）: 其实<code>%</code>这种格式输出已经很老了，<code>str.format</code>可以更加方便的格式输出以及提供更多功能。下表为一些基础的数格式输出。</li>
</ul>
<style>
table th, table td {
  text-align: center;
  padding: 5px;
}
</style>

<table>
<thead>
<tr>
<th>数</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>3.1415926</td>
<td>{:.2f}</td>
<td>3.14</td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td>3.1415926</td>
<td>{:+.2f}</td>
<td>+3.14</td>
<td>带符号保留小数后两位</td>
</tr>
<tr>
<td>-1</td>
<td>{:+.2f}</td>
<td>-1.00</td>
<td>带符号保留小数后两位</td>
</tr>
<tr>
<td>2.71828</td>
<td>{:.0f}</td>
<td>3</td>
<td>不带小数</td>
</tr>
<tr>
<td>5</td>
<td>{:0&gt;2d}</td>
<td>05</td>
<td>数左补0，宽度到2</td>
</tr>
<tr>
<td>5</td>
<td>{:x&lt;4d}</td>
<td>5xxx</td>
<td>数右补x，宽度到4</td>
</tr>
<tr>
<td>10</td>
<td>{:x&lt;4d}</td>
<td>10xx</td>
<td>数右补x，宽度到4</td>
</tr>
<tr>
<td>1000000</td>
<td>{:,}</td>
<td>1,000,000</td>
<td>使用逗号分隔</td>
</tr>
<tr>
<td>0.25</td>
<td>{:.2%}</td>
<td>25.00%</td>
<td>百分比格式，两位小数</td>
</tr>
<tr>
<td>1000000000</td>
<td>{:.2e}</td>
<td>1.00e+09</td>
<td>科学计数法</td>
</tr>
<tr>
<td>13</td>
<td>{:10d}</td>
<td>······13</td>
<td>右对齐，默认，宽度为10</td>
</tr>
<tr>
<td>13</td>
<td>{:&lt;10d}</td>
<td>13······</td>
<td>左对齐，宽度为10</td>
</tr>
<tr>
<td>13</td>
<td>{:^10d}</td>
<td>···13···</td>
<td>居中，宽度为10</td>
</tr>
</tbody>
</table>
<p>有关于<code>str.format</code>的用法：</p>
<pre class=" language-python"><code class="language-python">
s1 <span class="token operator">=</span> <span class="token string">"so much depends upon {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"a red wheel barrow"</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token string">"glazed with {} water beside the {} chickens"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"rain"</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>
</code></pre>
<p>这里<code>{}</code>即充当占位符，和<code>%s</code>的功能类似，会将<code>format</code>的参数依次填入。当然你也可以指定顺序填入，见下。</p>
<pre class=" language-python"><code class="language-python">
s1 <span class="token operator">=</span> <span class="token string">" {0} is better than {1} "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"emacs"</span><span class="token punctuation">,</span> <span class="token string">"vim"</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token string">" {1} is better than {0} "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"emacs"</span><span class="token punctuation">,</span> <span class="token string">"vim"</span><span class="token punctuation">)</span>
</code></pre>
<p>此外，这样能够标记序号的好处还有防止漏掉变量，见下。</p>
<pre class=" language-python"><code class="language-python">
set <span class="token operator">=</span>  <span class="token string">'(%s, %s, %s, %s, %s, %s, %s, %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># i是多余的</span>
set <span class="token operator">=</span> <span class="token string">'({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">)</span>
</code></pre>
<p><code>format</code>可以为占位符命名，这样就不需要严格的顺序了。</p>
<pre class=" language-python"><code class="language-python">
madlib <span class="token operator">=</span> <span class="token string">" I {verb} the {object} off the {place} "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>verb<span class="token operator">=</span><span class="token string">"took"</span><span class="token punctuation">,</span> object<span class="token operator">=</span><span class="token string">"cheese"</span><span class="token punctuation">,</span> place<span class="token operator">=</span><span class="token string">"table"</span><span class="token punctuation">)</span>
</code></pre>
<p>可以重复使用同一变量。</p>
<pre class=" language-python"><code class="language-python">
str <span class="token operator">=</span> <span class="token string">"Oh {0}, {0}! wherefore art thou {0}?"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"Romeo"</span><span class="token punctuation">)</span>
</code></pre>
<p>可以转换进制。</p>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0:d} - {0:x} - {0:o} - {0:b} "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>可以把<code>format</code>当做方法使用。</p>
<pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># 定义格式</span>
email_f <span class="token operator">=</span> <span class="token string">"Your email address was {email}"</span><span class="token punctuation">.</span>format

<span class="token comment" spellcheck="true"># 在另一个地方使用</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>email_f<span class="token punctuation">(</span>email<span class="token operator">=</span><span class="token string">"bob@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>如果你需要显示大括号，只要写两次就可以了。</p>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" The {} set is often represented as { {0} } "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="p30"><a href="#p30" class="headerlink" title="p30"></a>p30</h2><ul>
<li>含名称元组<code>collections.namedtuple</code>：在前文中提到过。注意使用<code>namedtuple</code>所需的内存是小于使用<code>class</code>的，因为<code>namedtuple</code>不会把参数存到完整实例<code>__dict__</code>中。</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple
City <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'City'</span><span class="token punctuation">,</span> <span class="token string">'name country population coordinates'</span><span class="token punctuation">)</span>
tokyo <span class="token operator">=</span> City<span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token number">36.933</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">35.689722</span><span class="token punctuation">,</span> <span class="token number">139.691667</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>在创建一个<code>namedtuple</code>时，既可以像之前一样使用列表包含属性，也可以使用空格分隔的字符串。</p>
<h2 id="p31"><a href="#p31" class="headerlink" title="p31"></a>p31</h2><ul>
<li>含名称元组的参数和方法：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>City<span class="token punctuation">.</span>_fields<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># ('name', 'country', 'population', 'coordinates')</span>

LatLong <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'LatLong'</span><span class="token punctuation">,</span> <span class="token string">'lat long'</span><span class="token punctuation">)</span>
delhi_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Delhi NCR'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token number">21.935</span><span class="token punctuation">,</span> LatLong<span class="token punctuation">(</span><span class="token number">28.613889</span><span class="token punctuation">,</span> <span class="token number">77.208889</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
delhi <span class="token operator">=</span> City<span class="token punctuation">.</span>_make<span class="token punctuation">(</span>delhi_data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>delhi<span class="token punctuation">.</span>_asdict<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># OrderedDict([('name', 'Delhi NCR'), ('country', 'IN'), ('population', 21.935), ('coordinates', LatLong(lat=28.613889, long=77.208889))])</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> delhi<span class="token punctuation">.</span>_asdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">'''
name: Delhi NCR
country: IN
population: 21.935
coordinates: LatLong(lat=28.613889, long=77.208889)
'''</span>
</code></pre>
<p>其中<code>City._make(delhi_data)</code>与<code>City(*delhi_data)</code>等价。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FluentPython笔记0x02]]></title>
      <url>/2017/07/26/FluentPython%E7%AC%94%E8%AE%B00x02/</url>
      <content type="html"><![CDATA[<p>嗯，记点单词。</p>
<h2 id="p14"><a href="#p14" class="headerlink" title="p14"></a>p14</h2><ul>
<li>augmented assignment: 增量赋值，例<code>i += 1</code>。</li>
</ul>
<a id="more"></a>
<ul>
<li>aspect-oriented programming: 面向侧面编程（AOP），又称面向方面编程，是对面向对象编程的补充。侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点，即关键的逻辑部分。例如Python的装饰器，某装饰器可以包含执行某一过程前后的日志记录，那么这种编程方法即可称为面向侧面编程。</li>
</ul>
<h1 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h1><h2 id="p21"><a href="#p21" class="headerlink" title="p21"></a>p21</h2><ul>
<li>list生成：比较两种方法的可读性。</li>
</ul>
<pre class=" language-python"><code class="language-python">
symbols <span class="token operator">=</span> <span class="token string">'abcdef'</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">:</span>
  codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span>
</code></pre>
<pre class=" language-python"><code class="language-python">
symbols <span class="token operator">=</span> <span class="token string">'abcdef'</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span>
</code></pre>
<p>for循环的功能有很多，诸如扫描队列并取出元素、计算总和等等，但是listcomp(list comprehension, 列表推导式)的功能就只有生成一个新列表。从这个角度来看后者可读性更高。</p>
<ul>
<li>在Python 2中，如果列表推导式、生成器表达式的作用域中的变量名和外面有重复的话是会产生冲突的。虽然Python 3解决了这一问题，但是在写代码时还是避免这种情况。</li>
</ul>
<h2 id="p23"><a href="#p23" class="headerlink" title="p23"></a>p23</h2><ul>
<li>Cartesian product: 笛卡尔积。下面的代码为推荐写法。</li>
</ul>
<pre class=" language-python"><code class="language-python">
colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">]</span>
sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">]</span>
tshirts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> colors
                         <span class="token keyword">for</span> size <span class="token keyword">in</span> sizes<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tshirts<span class="token punctuation">)</span>
</code></pre>
<h2 id="p25"><a href="#p25" class="headerlink" title="p25"></a>p25</h2><ul>
<li>generator expression: 生成器表达式。</li>
</ul>
<pre class=" language-python"><code class="language-python">
symbols <span class="token operator">=</span> <span class="token string">'abcdef'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> array
<span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span> <span class="token keyword">for</span> symbol <span class="token keyword">in</span> symbols<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>当生成器表达式单独作为参数时不需要加括号。但像在<code>array</code>中接受两个参数时，生成器表达式需要加上圆括号。上述的T恤的代码用生成器表达式改写：</p>
<pre class=" language-python"><code class="language-python">
colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">]</span>
sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> tshirt <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'%s %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> colors <span class="token keyword">for</span> s <span class="token keyword">in</span> sizes<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>tshirt<span class="token punctuation">)</span>
</code></pre>
<p>注意生成器的结果不会全部保存在内存中，它一次只会给<code>for</code>循环一个结果。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fluent Python笔记0x01]]></title>
      <url>/2017/07/19/FluentPython%E7%AC%94%E8%AE%B00x01/</url>
      <content type="html"><![CDATA[<p>划了两周水……</p>
<h2 id="p8"><a href="#p8" class="headerlink" title="p8"></a>p8</h2><ul>
<li>special methods是由Python解释器调用，不需要你来调用（虽然也可以亲自调用）。</li>
<li>对于内置类型如<code>list</code>，<code>str</code>，<code>bytearray</code>等来说，调用<code>len()</code>则是由CPython直接返回<code>PyVarObject</code>（C的struct）中关于长度的变量，这比调用<code>__len__</code>要快很多。</li>
</ul>
<a id="more"></a>
<h2 id="p10"><a href="#p10" class="headerlink" title="p10"></a>p10</h2><ul>
<li>例子1-2：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">from</span> math <span class="token keyword">import</span> hypot


<span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Vector(%r, %r)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__abs__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> hypot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> bool<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x
        y <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y
        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">*</span> other<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> other<span class="token punctuation">)</span>
</code></pre>
<h2 id="p11"><a href="#p11" class="headerlink" title="p11"></a>p11</h2><ul>
<li>关于<code>__str__</code>和<code>__repr__</code>的区别（参考：<a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python" target="_blank" rel="external">StackOverflow</a>）</li>
</ul>
<p>简单来说<code>__repr__</code>是为了保证无歧义，而<code>__str__</code>是为了提供可读性。在Python提供的类中，使用<code>__repr__</code>返回的结果都是格式化的数据，是符合Python语法的；<code>__str__</code>则是面向一般用户，提供可读性，但不保证无歧义，例如int型的3和str的3满足：</p>
<pre class=" language-python"><code class="language-python">str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="p12"><a href="#p12" class="headerlink" title="p12"></a>p12</h2><ul>
<li>关于运算符：例1-2中声明的<code>__add__</code>和<code>__mul__</code>是针对<code>+</code>和<code>*</code>的重载。注意这里乘法参数顺序必须为向量在前数在后。</li>
<li>布尔值：在Python中，任何对象都有布尔值。如果对象未声明<code>__bool__</code>或<code>__len__</code>，则其布尔值恒为<code>True</code>。如果声明了<code>__bool__</code>则<code>bool()</code>会使用其返回值。如果没有声明<code>__bool__</code>而声明了<code>__len__</code>则会使用<code>len()</code>的返回值，为0则为<code>False</code>，否则为<code>True</code>。</li>
<li>有关例1-2中<code>Vector.__bool__</code>一个更加便捷的声明：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> bool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">or</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
</code></pre>
<p>这样可以避免使用<code>abs()</code>。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMWare共享文件夹设置]]></title>
      <url>/2017/07/19/VMWare%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.itread01.com/articles/1476103217.html" target="_blank" rel="external">http://www.itread01.com/articles/1476103217.html</a></p>
<p>讲道理还是在Windows下写代码舒服一些，那么就需要把代码同步到Linux虚拟机上。<br>使用VMWare的共享文件夹是个好方法。<br>虚拟机为CentOS7。</p>
<a id="more"></a>
<p>首先给Windows和Linux虚拟机均安装VMWare Tools，下面为Linux下安装VMWare Tools：</p>
<pre class=" language-shell"><code class="language-shell">yum install open-vm-tools open-vm-tools-desktop
</code></pre>
<p>配置服务：</p>
<pre class=" language-shell"><code class="language-shell">vi /etc/systemd/system/mnt.hgfs.service
</code></pre>
<p>内容为：</p>
<pre><code>[Unit]

Description=Load VMware shared folders

Requires=vmware-vmblock-fuse.service

After=vmware-vmblock-fuse.service

ConditionPathExists=.host:/

ConditionVirtualization=vmware


[Service]

Type=oneshot

RemainAfterExit=yes

ExecStart=

ExecStart=/usr/bin/vmhgfs-fuse -o allow_other -o auto_unmount .host:/ /mnt/hgfs


[Install]

WantedBy=multi-user.target
</code></pre><p>保存然后启动服务：</p>
<pre class=" language-shell"><code class="language-shell">systemctl enable mnt.hgfs.service
</code></pre>
<p>创建挂载文件夹：</p>
<pre class=" language-shell"><code class="language-shell">mkdir -p /mnt/hgfs
</code></pre>
<p>重启虚拟机应该就能看到共享的文件夹了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMWare </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gal填坑进度0x00]]></title>
      <url>/2017/07/13/gal%E5%A1%AB%E5%9D%91%E8%BF%9B%E5%BA%A60x00/</url>
      <content type="html"><![CDATA[<p>ftb专家模式实在是肝不动了，准备回归剧情向游戏，然后看看动画什么的，还有就是希望能够把日语捡起来……<br>目前还能想到的坑：</p>
<a id="more"></a>
<p>* 战国兰斯（Alicesoft）</p>
<p>* 车轮之国，向日葵的少女（AKABEiSOFT2）</p>
<p>* 白色相簿2（Leaf）</p>
<p>* 秽翼的尤斯蒂娅（August）</p>
<p> 更胜夜明前的琉璃色（August）</p>
<p> * Little Busters!(Key)</p>
<p> 神采（Eushully）</p>
<p> 姬狩（Eushully）</p>
<p> D.C.P.C（Circus）</p>
<p> D.C.II（Circus）</p>
<p> 公主恋人（Ricotta）</p>
<p> 恋爱少女和守护之盾（AXL）</p>
<p> 遥仰凰华（PULLTOP）</p>
<p> 白熊铃星群（PULLTOP）</p>
<p> 为了明日与君相逢（PULLTOP）</p>
<p> 看样子这些够一段时间的了……其他的再说吧~</p>
]]></content>
      
        <categories>
            
            <category> ACG </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACG </tag>
            
            <tag> galgame </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fluent Python笔记0x00]]></title>
      <url>/2017/07/05/FluentPython%E7%AC%94%E8%AE%B00x00/</url>
      <content type="html"><![CDATA[<p>鬼使神差地买了一本英文的，想想还是写个笔记。版本为东南大学的影印版，原版***贵。</p>
<h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="p4"><a href="#p4" class="headerlink" title="p4"></a>p4</h2><ul>
<li>Python中类似于<code>__getitem__</code>这种方法称为special method，作者称其为“dunder-getitem”。此外，类似<code>__x</code>是有其他含义的。</li>
</ul>
<a id="more"></a>
<h2 id="p5"><a href="#p5" class="headerlink" title="p5"></a>p5</h2><ul>
<li>collections: 包含一些数据类型，例如namedtuple等。</li>
</ul>
<p>参考: <a href="http://www.zlovezl.cn/articles/collections-in-python/" target="_blank" rel="external">http://www.zlovezl.cn/articles/collections-in-python/</a></p>
<ul>
<li>collections.namedtuple(): 构建一个可以用名称取值的tuple，例如：</li>
</ul>
<pre class=" language-python"><code class="language-python">
Point <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Point'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
point <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
</code></pre>
<p>参考: <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000</a></p>
<ul>
<li>例子1-1：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> collections


Card <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rank'</span><span class="token punctuation">,</span> <span class="token string">'suit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">FrenchDeck</span><span class="token punctuation">:</span>
    ranks <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> list<span class="token punctuation">(</span><span class="token string">'JQKA'</span><span class="token punctuation">)</span>
    suits <span class="token operator">=</span> <span class="token string">'spades diamonds clubs hearts'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>rank<span class="token punctuation">,</span> suit<span class="token punctuation">)</span> <span class="token keyword">for</span> suit <span class="token keyword">in</span> self<span class="token punctuation">.</span>suits <span class="token keyword">for</span> rank <span class="token keyword">in</span> self<span class="token punctuation">.</span>ranks<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_cards<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cards<span class="token punctuation">[</span>position<span class="token punctuation">]</span>
</code></pre>
<p>其中，使用collections.namedtuple建立了一张扑克牌的模型，FrenchDeck则建立了所有的扑克牌。<br>此时在Python shell中输入：</p>
<pre><code>&gt;&gt;&gt; deck[3]
</code></pre><p>会得到如下结果：</p>
<pre><code>Card(rank=&#39;K&#39;, suit=&#39;hearts&#39;)
</code></pre><p>这是由<code>__getitem__</code>方法提供的。</p>
<ul>
<li>对于Python数据模型来说，special method 的优点：<ol>
<li>统一标准操作（例如，用户不需要记住每种数据模型对应的获取长度的方法是<code>.size()</code>还是<code>.length()</code>）。</li>
<li>通过提供统一的special method，可以丰富Python标准库（例如上述的random.rich），也可以支持Python中包含的运算符操作（例如FrenchDeck支持迭代，也支持[]操作符）。</li>
</ol>
</li>
<li>使用<code>in</code>操作时，如果数据模型没有实现<code>__contains__</code>方法，Python会进行顺序扫描。</li>
<li>目前的<code>_cards</code>中扑克牌序列是不能被打乱的，在Chapter 11中会介绍<code>__setitem__</code>方法来实现。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
