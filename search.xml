<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[VMWare共享文件夹设置]]></title>
      <url>/2017/07/19/VMWare%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>参考：<a href="http://www.itread01.com/articles/1476103217.html" target="_blank" rel="external">http://www.itread01.com/articles/1476103217.html</a></p>
<p>讲道理还是在Windows下写代码舒服一些，那么就需要把代码同步到Linux虚拟机上。<br>使用VMWare的共享文件夹是个好方法。<br>虚拟机为CentOS7。</p>
<a id="more"></a>
<p>首先给Windows和Linux虚拟机均安装VMWare Tools，下面为Linux下安装VMWare Tools：</p>
<pre class=" language-shell"><code class="language-shell">
yum install open-vm-tools open-vm-tools-desktop
</code></pre>
<p>配置服务：</p>
<pre class=" language-shell"><code class="language-shell">
vi /etc/systemd/system/mnt.hgfs.service
</code></pre>
<p>内容为：</p>
<pre><code>
[Unit]

Description=Load VMware shared folders

Requires=vmware-vmblock-fuse.service

After=vmware-vmblock-fuse.service

ConditionPathExists=.host:/

ConditionVirtualization=vmware


[Service]

Type=oneshot

RemainAfterExit=yes

ExecStart=

ExecStart=/usr/bin/vmhgfs-fuse -o allow_other -o auto_unmount .host:/ /mnt/hgfs


[Install]

WantedBy=multi-user.target
</code></pre><p>保存然后启动服务：</p>
<pre class=" language-shell"><code class="language-shell">
systemctl enable mnt.hgfs.service
</code></pre>
<p>创建挂载文件夹：</p>
<pre class=" language-shell"><code class="language-shell">
mkdir -p /mnt/hgfs
</code></pre>
<p>重启虚拟机应该就能看到共享的文件夹了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMWare </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gal填坑进度0x00]]></title>
      <url>/2017/07/13/gal%E5%A1%AB%E5%9D%91%E8%BF%9B%E5%BA%A60x00/</url>
      <content type="html"><![CDATA[<p>ftb专家模式实在是肝不动了，准备回归剧情向游戏，然后看看动画什么的，还有就是希望能够把日语捡起来……<br>目前还能想到的坑：</p>
<a id="more"></a>
<p>* 战国兰斯（Alicesoft）</p>
<p>* 车轮之国，向日葵的少女（AKABEiSOFT2）</p>
<p>* 白色相簿2（Leaf）</p>
<p>* 秽翼的尤斯蒂娅（August）</p>
<p> 更胜夜明前的琉璃色（August）</p>
<p> * Little Busters!(Key)</p>
<p> 神采（Eushully）</p>
<p> 姬狩（Eushully）</p>
<p> D.C.P.C（Circus）</p>
<p> D.C.II（Circus）</p>
<p> 公主恋人（Ricotta）</p>
<p> 恋爱少女和守护之盾（AXL）</p>
<p> 遥仰凰华（PULLTOP）</p>
<p> 白熊铃星群（PULLTOP）</p>
<p> 为了明日与君相逢（PULLTOP）</p>
<p> 看样子这些够一段时间的了……其他的再说吧~</p>
]]></content>
      
        <categories>
            
            <category> ACG </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACG </tag>
            
            <tag> galgame </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fluent Python笔记0x00]]></title>
      <url>/2017/07/05/FluentPython%E7%AC%94%E8%AE%B00x00/</url>
      <content type="html"><![CDATA[<p>鬼使神差地买了一本英文的，想想还是写个笔记。版本为东南大学的影印版，原版***贵。</p>
<h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="p4"><a href="#p4" class="headerlink" title="p4"></a>p4</h2><ul>
<li>Python中类似于<code>__getitem__</code>这种方法称为special method，作者称其为“dunder-getitem”。此外，类似<code>__x</code>是有其他含义的。</li>
</ul>
<a id="more"></a>
<h2 id="p5"><a href="#p5" class="headerlink" title="p5"></a>p5</h2><ul>
<li>collections: 包含一些数据类型，例如namedtuple等。</li>
</ul>
<p>参考: <a href="http://www.zlovezl.cn/articles/collections-in-python/" target="_blank" rel="external">http://www.zlovezl.cn/articles/collections-in-python/</a></p>
<ul>
<li>collections.namedtuple(): 构建一个可以用名称取值的tuple，例如：</li>
</ul>
<pre class=" language-python"><code class="language-python">
Point <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Point'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
point <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
</code></pre>
<p>参考: <a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001411031239400f7181f65f33a4623bc42276a605debf6000</a></p>
<ul>
<li>例子1-1：</li>
</ul>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">import</span> collections


Card <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rank'</span><span class="token punctuation">,</span> <span class="token string">'suit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">FrenchDeck</span><span class="token punctuation">:</span>
    ranks <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> list<span class="token punctuation">(</span><span class="token string">'JQKA'</span><span class="token punctuation">)</span>
    suits <span class="token operator">=</span> <span class="token string">'spades diamonds clubs hearts'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>rank<span class="token punctuation">,</span> suit<span class="token punctuation">)</span> <span class="token keyword">for</span> suit <span class="token keyword">in</span> self<span class="token punctuation">.</span>suits <span class="token keyword">for</span> rank <span class="token keyword">in</span> self<span class="token punctuation">.</span>ranks<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_cards<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cards<span class="token punctuation">[</span>position<span class="token punctuation">]</span>
</code></pre>
<p>其中，使用collections.namedtuple建立了一张扑克牌的模型，FrenchDeck则建立了所有的扑克牌。<br>此时在Python shell中输入：</p>
<pre><code>&gt;&gt;&gt; deck[3]
</code></pre><p>会得到如下结果：</p>
<pre><code>Card(rank=&#39;K&#39;, suit=&#39;hearts&#39;)
</code></pre><p>这是由<code>__getitem__</code>方法提供的。</p>
<ul>
<li>对于Python数据模型来说，special method 的优点：<ol>
<li>统一标准操作（例如，用户不需要记住每种数据模型对应的获取长度的方法是<code>.size()</code>还是<code>.length()</code>）。</li>
<li>通过提供统一的special method，可以丰富Python标准库（例如上述的random.rich），也可以支持Python中包含的运算符操作（例如FrenchDeck支持迭代，也支持[]操作符）。</li>
</ol>
</li>
<li>使用<code>in</code>操作时，如果数据模型没有实现<code>__contains__</code>方法，Python会进行顺序扫描。</li>
<li>目前的<code>_cards</code>中扑克牌序列是不能被打乱的，在Chapter 11中会介绍<code>__setitem__</code>方法来实现。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
